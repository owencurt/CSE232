#include <iostream>
#include <string>

// Test if 'word' is a full entry in 'word_list' beginning as index 'pos'.
bool AtListPosition(std::string word_list, std::string word, size_t pos)
{
}

// Inputs are:
//   word_list - a string that contains a list of comma-separated words.
//   word - a string that contains to word to search for in the list.
//   pos - an optional size_t containing the position to start the search
//         (start at zero if no pos argument is provided)
// Return:
//   The index where 'word' was found as a full entry in word_list -or-
//   std::string::npos if word is not found
//
// Note, must match FULL word.  So "def" would be matched in "abc,def,ghijk,l" or in
// "def,456,ghi,789,jkl", but NOT in "defeated,indefinitely,redefined"
size_t FindInList(std::string word_list, std::string word, size_t pos=0)
{
}

// Takes two strings and a word list.
// Returns the value of the string found first in the word list.
// Should return "N/A" if neither is in the word list.
std::string GetFirstInList(std::string word_list,
                           std::string word1,
                           std::string word2)
{
}

// Takes a word_list and a word and counts the number of times that word
// is found in the list.
size_t CountInList(std::string word_list, std::string word) 
{
}


// As inputs from std::cin, take in two words.  Then take in a series of comma-separated word_lists.
// For each word list provided, output which of the two words comes first, or "N/A" if neither is in
// the list.  Then output (on the same line) a count of how many times each word appeared.
//
// Example Input:
//   Kansas
//   Virginia
//   Virginia,Wyoming,Vermont
//   NewMexico,Kansas,Alabama,Virginia,NewYork,WestVirginia,Arkansas,Virginia,Utah,Virginia
//   Alaska
//
// Example Output:
//   Virginia 0 1
//   Kansas 1 3
//   N/A 0 0
//
// Note: The second output line has Virginia listed only 3 times, ignoring "WestVirginia"

int main()
{
}
